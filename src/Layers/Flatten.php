<?php

namespace NumPower\Lattice\Layers;

use NDArray as nd;
use NumPower\Lattice\Core\Layers\InputSpec;
use NumPower\Lattice\Core\Layers\Layer;
use NumPower\Lattice\Core\Tensor;
use NumPower\Lattice\Exceptions\ValueErrorException;

class Flatten extends Layer
{
    public function __construct()
    {
        parent::__construct("flatten_" . substr(uniqid(), -4), true);
    }

    /**
     * @param Tensor $inputs
     * @param bool $training
     * @return Tensor
     */
    public function __invoke(Tensor $inputs, bool $training = false): Tensor
    {
        $ishape = $this->getInputShape();
        array_shift($ishape);
        $num_values = nd::prod(nd::array($ishape));
        $output = Tensor::reshape($inputs, [count($inputs->getArray()), $num_values]);
        return $output;
    }

    /**
     * @param array $inputShape
     * @return void
     * @throws ValueErrorException
     */
    public function build(array $inputShape): void
    {
        $this->setInputSpec(new InputSpec(shape: $inputShape));
        parent::build($inputShape); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function generateOutputShape(): array
    {
        $ishape = $this->getInputShape();
        array_shift($ishape);
        return [$this->getInputShape()[0], nd::prod(nd::array($ishape))];
    }
}
